<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!--        [1]groupId：公司或组织的域名倒序+当前项目名称:org.apache.kafka    -->
    <!--        [2]artifactId：当前项目的模块名称:            kafka-clients       -->
    <!--        [3]version：当前模块的版本:                   0.11.0.0            -->
    <!--        [4]scope：当前导入的模块的适用范围:test不传递、compile传递        -->
    <groupId>myfirst</groupId>
    <artifactId>LearnAccumulate</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!-- 【0.1】、父工程管理依赖版本，在子工程中就可以不配置以来的版本了 -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.9</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- 【0.2】、在子工程配置自己的父工程
    <parent>
        <groupId>myfirst</groupId>
        <artifactId>LearnAccumulate</artifactId>
        <version>1.0-SNAPSHOT</version>
        指定从当前子工程的pom.xml文件出发，查找父工程的pom.xml的路径
        <relativePath>../Parent/pom.xml</relativePath>
    </parent>
    -->

    <!-- 【0.3】、聚合操作，在总的聚合工程中使用modules/module标签组合，指定模块工程的相对路径，这样工程的多个子模块打包就会自动打包相关依赖，不报错了
    <modules>
        <module>../Hello</module>
        <module>../HelloFriend</module>
        <module>../MakeFriends</module>
    </modules>
    -->

    <build>
        <!-- 【0.4】、指定sourceDirectory和testsourceDirectory -->
        <sourceDirectory>src/main/java</sourceDirectory>
        <!--<testSourceDirectory>src/test/java</testSourceDirectory>-->
        <plugins>

            <!-- 【1】、解决maven test命令时console出现中文乱码问题，每个项目都要单独导 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.7.2</version>
                <configuration>
                    <forkMode>once</forkMode>      <!--在一个进程中进行所有测试 ; 默认值:once -->
                    <argLine>-Dfile.encoding=UTF-8</argLine>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!-- 【2】、依赖的版本管理，控制依赖都是4.1.1版本及以上，‘<spring.version>’的明细随便取
            然后在下边dependencies里指定 “<version>${spring.version}</version>”即可使用-->
    <properties>
        <spring.version>4.1.1.RELEASE</spring.version>
    </properties>

    <dependencies>
        <!-- 【3】、junit - Test工具类-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>RELEASE</version>
            <scope>compile</scope>

            <!-- 【4】、依赖排除(在此工程的dependency中排除次依赖下的可能产生的依赖重复进行排除) -->
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- 【5】、Kafka消费者和生产者导包 -->
        <!-- https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients -->
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
            <version>0.11.0.0</version>
        </dependency>

        <!-- 【6】、Kafka监听器导包 -->
        <!-- https://mvnrepository.com/artifact/org.apache.kafka/kafka -->
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka_2.12</artifactId>
            <version>0.11.0.0</version>
        </dependency>

        <!-- 【7】、log4j 和 src/main/respurces/log4j.properties 配合 -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.8.2</version>
        </dependency>

        <!-- 【8】、hadoop相关 -->
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-common</artifactId>
            <version>2.7.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-client</artifactId>
            <version>2.7.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-hdfs</artifactId>
            <version>2.7.2</version>
        </dependency>
        <!--  【9】、在hadoopHDFS文档里不知道干嘛的 -->
        <dependency>
            <groupId>jdk.tools</groupId>
            <artifactId>jdk.tools</artifactId>
            <version>1.8</version>
            <scope>system</scope>
            <systemPath>${JAVA_HOME}/lib/tools.jar</systemPath>
        </dependency>

        <!-- 【10】、MyBatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.4.2</version>
        </dependency>

        <!-- 【11】、MySqlJDBC -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.37</version>
        </dependency>

        <!-- 【12】、redis导入 jedis 依赖 -->
        <!-- https://mvnrepository.com/artifact/redis.clients/jedis -->
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>2.9.0</version>
        </dependency>

        <!-- 【99】、不知道是啥
        <dependency>
            <groupId>jdk.tools</groupId>
            <artifactId>jdk.tools</artifactId>
            <version>1.8</version>
            <scope>system</scope>
            <systemPath>${JAVA_HOME}/lib/tools.jar</systemPath>
        </dependency>
        -->
    </dependencies>


</project>